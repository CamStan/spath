# Header files need not be enumerated
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_BINARY_DIR})

###########
# LIB SPATH #
###########

IF(TVDISPLAY)
    ADD_DEFINITIONS(-DHAVE_TV)
ENDIF(TVDISPLAY)

# Install header files
LIST(APPEND libspath_install_headers
    spath.h
    spath_util.h
)
IF(MPI)
    LIST(APPEND libspath_install_headers spath_mpi.h)
ENDIF(MPI)
INSTALL(FILES ${libspath_install_headers} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

LIST(APPEND libspath_noMPI_srcs
    spath.c
    spath_util.c
)
IF(TVDISPLAY)
    LIST(APPEND libspath_noMPI_srcs tv_data_display.c)
ENDIF(TVDISPLAY)

LIST(APPEND libspath_srcs
    spath.c
    spath_util.c
)
IF(MPI)
    LIST(APPEND libspath_srcs spath_mpi.c)
ENDIF(MPI)
IF(TVDISPLAY)
    LIST(APPEND libspath_srcs tv_data_display.c)
ENDIF(TVDISPLAY)

# SPATH Library
ADD_LIBRARY(spath_o OBJECT ${libspath_srcs})
TARGET_LINK_LIBRARIES(spath_o PRIVATE ${SPATH_EXTERNAL_LIBS})
IF(MPI)
    TARGET_LINK_LIBRARIES(spath_o PRIVATE MPI::MPI_C)
ENDIF(MPI)

IF(BUILD_SHARED_LIBS)
    ADD_LIBRARY(spath SHARED $<TARGET_OBJECTS:spath_o>)
    ADD_LIBRARY(spath::spath ALIAS spath)
    TARGET_LINK_LIBRARIES(spath PUBLIC ${SPATH_EXTERNAL_LIBS})
    IF(MPI)
        TARGET_LINK_LIBRARIES(spath PRIVATE MPI::MPI_C)
    ENDIF(MPI)
    TARGET_INCLUDE_DIRECTORIES(spath PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}> $<INSTALL_INTERFACE:include>)
    SET_TARGET_PROPERTIES(spath PROPERTIES OUTPUT_NAME spath CLEAN_DIRECT_OUTPUT 1)
    INSTALL(TARGETS spath EXPORT spathTargets LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
ENDIF(BUILD_SHARED_LIBS)

ADD_LIBRARY(spath-static STATIC $<TARGET_OBJECTS:spath_o>)
ADD_LIBRARY(spath::spath-static ALIAS spath-static)
IF(SPATH_LINK_STATIC)
    SET_TARGET_PROPERTIES(spath-static PROPERTIES LINK_SEARCH_START_STATIC 1)
    SET_TARGET_PROPERTIES(spath-static PROPERTIES LINK_SEARCH_END_STATIC 1)
ENDIF(SPATH_LINK_STATIC)
TARGET_LINK_LIBRARIES(spath-static PUBLIC ${SPATH_EXTERNAL_LIBS})
IF(MPI)
    TARGET_LINK_LIBRARIES(spath-static PRIVATE MPI::MPI_C)
ENDIF(MPI)
TARGET_INCLUDE_DIRECTORIES(spath-static PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}> $<INSTALL_INTERFACE:include>)

SET_TARGET_PROPERTIES(spath-static PROPERTIES OUTPUT_NAME spath CLEAN_DIRECT_OUTPUT 1)
INSTALL(TARGETS spath-static EXPORT spathTargets LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

# SPATH Library (no MPI)
ADD_LIBRARY(spath_base_o OBJECT ${libspath_noMPI_srcs})
TARGET_LINK_LIBRARIES(spath_base_o PRIVATE ${SPATH_EXTERNAL_LIBS})

IF(BUILD_SHARED_LIBS)
    ADD_LIBRARY(spath_base SHARED $<TARGET_OBJECTS:spath_base_o>)
    ADD_LIBRARY(spath::spath_base ALIAS spath_base)
    TARGET_LINK_LIBRARIES(spath_base PUBLIC ${SPATH_EXTERNAL_LIBS})
    TARGET_INCLUDE_DIRECTORIES(spath_base PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}> $<INSTALL_INTERFACE:include>)
    SET_TARGET_PROPERTIES(spath_base PROPERTIES OUTPUT_NAME spath_base CLEAN_DIRECT_OUTPUT 1)
    INSTALL(TARGETS spath_base EXPORT spathTargets LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
ENDIF(BUILD_SHARED_LIBS)

ADD_LIBRARY(spath_base-static STATIC $<TARGET_OBJECTS:spath_base_o>)
ADD_LIBRARY(spath::spath_base-static ALIAS spath_base-static)
IF(SPATH_LINK_STATIC)
    SET_TARGET_PROPERTIES(spath_base-static PROPERTIES LINK_SEARCH_START_STATIC 1)
    SET_TARGET_PROPERTIES(spath_base-static PROPERTIES LINK_SEARCH_END_STATIC 1)
ENDIF(SPATH_LINK_STATIC)
TARGET_LINK_LIBRARIES(spath_base-static PUBLIC ${SPATH_EXTERNAL_LIBS})
TARGET_INCLUDE_DIRECTORIES(spath_base-static PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}> $<INSTALL_INTERFACE:include>)

SET_TARGET_PROPERTIES(spath_base-static PROPERTIES OUTPUT_NAME spath_base CLEAN_DIRECT_OUTPUT 1)
INSTALL(TARGETS spath_base-static EXPORT spathTargets LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
